name: "Build et deploiement d'une image Docker"

on:
  workflow_dispatch:
  push:
    branches: [ 'main' ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  DOMAIN_NAME: devsoleo.fr

jobs:
  #build-image:
  #  runs-on: ubuntu-latest
  #  permissions:
  #    contents: read
  #    packages: write
  #
  #  steps:
  #    - name: Checkout repository
  #      uses: actions/checkout@v3
  #
  #    - name: Connexion au registry de GitHub
  #      uses: docker/login-action@v2
  #      with:
  #        registry: ${{ env.REGISTRY }}
  #        username: ${{ github.actor }}
  #        password: ${{ secrets.GITHUB_TOKEN }}
  #
  #    - name: Extract metadata (tags, labels) for Docker
  #      id: meta
  #      uses: docker/metadata-action@v4
  #      with:
  #        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
  #
  #    - name: Build and push Docker image
  #      uses: docker/build-push-action@v3
  #      with:
  #        context: .
  #        push: true
  #        tags: ghcr.io/devsoleo/brief-8:latest
  #        labels: ${{ steps.meta.outputs.labels }}
          
  deploy-infrastructure:
    # needs: build-image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        
      - name: Connexion au cluster kubernetes
        run: |
          mkdir ~/.kube/
          echo -e "${{ secrets.KUBECONFIG }}" > ~/.kube/config
          
      - name: Connexion au cluster kubernetes
        run: |
          ls -la
          kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.3.0/deploy/static/provider/cloud/deploy.yaml
          kubectl apply -f https://github.com/jetstack/cert-manager/releases/download/v1.8.0/cert-manager.yaml
          kubectl apply -f ./k8s/infrastructure.yml
          kubectl apply -f ./k8s/autoscaler.yml
          kubectl apply -f ./k8s/ingress.yml
          kubectl apply -f ./k8s/certificate-issuer.yml
          
  tests:
    needs: deploy-infrastructure
    runs-on: ubuntu-latest
    steps:
      - name: Test service avaibility
        run: curl -I "https://${{ env.DOMAIN_NAME }}" --connect-timeout 5 2>&1 | awk '/HTTP\// {print $2}'
        id: http_code
      - name: Checking test output
        run: |
          if [ "${{ steps.http_code.outcome }}" == "Success" ]; then
            if [ "${{ steps.http_code.exit_code }}" -eq "200" ]; then
              echo "Service disponible (200)"
            else
              echo "Service indisponible"
              exit 1
            fi
          fi
